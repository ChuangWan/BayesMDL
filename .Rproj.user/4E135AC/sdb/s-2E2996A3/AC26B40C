{
    "collab_server" : "",
    "contents" : "###########################################################\n#########             Harmonic Regression          ########\n###########################################################\n#' Harmonic regression\n#'\n#' @param x Input time series of length \\code{n}.\n#' @param k The highest order of the factor inside sin/cos.\n#' @param time_ind A index vector of times, or \\code{NULL}, in which case\n#'   \\code{1:n} will be used.\n#' @param intercept Logical, whether to include an intercept.\n#' @param return_design Logical, whether to return the design matrix.\n#'\n#' @return A linear regession \\code{lm} object.\n#'\n#' @export\n#' @importFrom stats lm\n#' @keywords internal\n#'\nharmonic_lm = function(x, k = 3, time_ind = NULL, intercept = TRUE,\n                       return_design = TRUE){\n\n  n = length(x);\n\n  if(is.null(time_ind)){\n    time_ind = 1:n;\n  }\n\n  ## Design matrix\n  if(k > 0){\n    design_sin = outer(time_ind, 1:k, function(t, k){sin(2 * pi / 12 * t * k)});\n    design_cos = outer(time_ind, 1:k, function(t, k){cos(2 * pi / 12 * t * k)});\n    design = data.frame(design_sin, design_cos);\n    names(design) = c(paste0('sin', 1:k), paste0('cos', 1:k));\n\n    ## Add intercept\n    if(intercept){\n      design$intercept = 1;\n    }\n    ## Also include x\n    design$x = x;\n  }\n\n  if(k == 0){\n    design = data.frame(intercept = rep(1, n), x = x);\n  }\n  ## Linear regression\n  return(lm(x ~ . -1, data = design, x = return_design));\n}\n\n###########################################################\n######     Create eta from non-zero-one sequence    #######\n###########################################################\n#' Convert a Location Vector to a 0-1 Indicator Vector\n#'\n#' Convert a location vector to a 0-1 indicator vector, such that the\n#'   corresponding entries in these locations are 1.\n#'\n#' @param loc An integer vector, length does not exceed \\code{N}.\n#' @param N The length of the resulting indicator vector.\n#' @return A 0-1 indicator vector of length \\code{N}.\n#' @export\n#' @keywords internal\n\nloc2dirac = function(loc, N){\n  dirac = rep(0, N);\n  dirac[loc] = 1;\n  return(dirac);\n}\n\n###########################################################\n######   Create a design matrix D for a model eta   #######\n###########################################################\n#' Create a design matrix D for a model eta\n#'\n#' @inheritParams fit_eta\n#' @return\n#' \\item{D}{A \\code{n} by \\code{(2*m-1)} matrix. The first \\code{m}\n#'   columns are for regime means; they are 0/1 indicators for regimes from 2 to\n#'   \\code{m}. The next \\code{(m+1)} columns are for trends.}\n#' \\item{seg_lengths}{A vector of length \\code{m}, regime lengths, including\n#'   the first regime. }\n#'\n#' @export\n#' @keywords internal\n#'\n\nD_eta = function(x, eta, scale_trend_design){\n\n  m = sum(eta); n = length(x);\n\n  ## Design matrix for regime means: n by m (eventually: n by m - 1)\n  ## Later, the column for the 1st regime will be deleted in D_mu\n  D_mu = matrix(as.numeric(matrix(rep(cumsum(eta) + 1, m + 1), ncol = m + 1) ==\n                             matrix(rep(1:(m + 1), n), ncol = m + 1, byrow = TRUE)),\n                ncol = m + 1);\n\n  seg_lengths = apply(D_mu, 2, sum);\n\n  ## Design matrix for regime trends: n by m\n  D_alpha = matrix(rep(1:n), nrow = n, ncol = m + 1);\n  D_alpha = (D_alpha - matrix(c(0, which(eta == 1) - 1) + (1 + seg_lengths) / 2,\n                              nrow = n, ncol = m + 1, byrow = TRUE)) * D_mu;\n  D_alpha = D_alpha * scale_trend_design;\n\n  ## Combine the two design matrices of regime parameters\n  ## Note that even for the null model, the D matrix still contains 1 column of trend\n  D = cbind(D_mu[, -1], D_alpha);\n\n  return(list(D = D, seg_lengths = seg_lengths));\n}\n\n###########################################################\n#' Location of the last changepoint\n#'\n#' @inheritParams fit_eta\n#' @return An iterger, the location of the last changepoint, or \\code{NA} if\n#'   there are no changepoints.\n#' @export\n#' @keywords internal\n#'\nlast_cp = function(eta){\n  if(sum(eta) == 0){\n    return(NA);\n  } else {\n    return(max(which(eta == 1)));\n  }\n}\n",
    "created" : 1504069260016.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2783443466",
    "id" : "AC26B40C",
    "lastKnownWriteTime" : 1504069467,
    "last_content_update" : 1504069467866,
    "path" : "~/Dropbox/Research/2014 Joint Tmax and Tmin/Mypackage_bmdlr/BayesMDL/R/misc.R",
    "project_path" : "R/misc.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}